# docker-compose.dev.yml
services:
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      backend:
        condition: service_healthy # <-- Ahora esto funcionará
      frontend:
        condition: service_started

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      # --- CORRECCIÓN IMPORTANTE AQUÍ ---
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - codenotes-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://admin:secret_password@db:5432/codenotes?schema=public
      - JWT_SECRET=ESTE_ES_UN_SECRETO_DE_PRUEBA_CAMBIAME
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "npx prisma migrate deploy && npm run start:dev"
    # --- CAMBIO IMPORTANTE AQUÍ ---
    # Se añade un healthcheck para el propio backend.
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s # Da tiempo a que la app inicie y corra migraciones

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  codenotes-db-data:

